

010-9916-0908

신기화

--------------------------------------------------------------------------------


                요청
            HTTP Request
           -------------->

Web Browser                Web Sever

           <--------------
                응답
            HTTP Response





HTTP Request, Response

   HyperText Transfer Protocol : HTML 텍스트를 전송하는 규약?

   Reguest : 요청

   Response : 응답

http://www.facebook.com'/' : '/'는 홈디렉토리



<script>...</script> --> javascript


반응형웹 : 화면의 크기에 따라 재배치


--------------------------------------------------------------------------------
11.3

Program Language

  1.Script : 실행시킨 순간 컴파일이 되고 실행 --> html, javascript (중요!!)
             유지보수와 배포가 쉽다
             Web 쪽은 대부분 Script를 사용한다



  2.compile : 미리 컴파일을 해놓고 실행 --> C, C++
              실행속도가 빠르다


      test.c ---------> test.exe
         ↓   [compile]     ↓
    sourcecode          실행파일




★재배포(Redistribution)

--------------------------------------------------------------------------------

javascript 기초 문법
  Web Browser에서 실행
  확장자는 .js

  ●기본구조

    <script>
    </script>

  ●javascript 위치

    1.body 태그 내부(문서 전체에 적용)
    2.head 태그 내부(부분적으로 적용)

  ●상수(Constant Value)
    바뀌지 않는다

    1.숫자(Number) 상수 :
    2.문자(Character) 상수 : "" 로 묶어준다
    3.문자열(String) 상수 : "" 로 묶어준다
      "" 로 묶지 않으면 변수로 취급한다


  ●변수(Variable Value)
    변하는 값

  ●사칙연산
    +, -, *, /

  ●수학식 계산 (Math.)
    대소문자 주의
    수학에 사용되는 복잡한 연산을 처리해준다

    Math.pow(3,2) = 9 (3²)         자승
    Math.round(1.6) = 2            반올림
    Math.floor(1.6) = 1            내림
    Math.sqrt(9) = 3 (√)           제곱근

--------------------------------------------------------------------------------
11.4

반복문(while)

  ●문법
    while(조건1){
    "조건1"이 만족할 때 실행 ---> 만족의 의미는 참과 거짓
    }

--------------------------------------------------------------------------------
11.7

웹 브라우저 / 웹 서버

   Client   --->   [P]   --->   Server
            <---         <---
  (Browser)                  (Web Server)

              [P] : Proxy

proxy -> paros -> java


언어의 종류
  - script
  - compile --- (C/C++ 은 컴파일 이용)
  - VM(Virtual Machine)



*-------------------------------------------------------*
*** Paros ***
32bit JRE
64bit JRE (Paros는 64bit에서 작동하지 않는다)

Loopback IP : 주소 127.0.0.1 포트 8080

*내 컴퓨터에서 사용중인 포트번호 확인
netstat -na|more                 |more 은 한페이지씩
netstat -nao|more                PID 검색 (Process ID)

32/64bit
  1. CPU : 32bit CPU(거의 없음) / 64bit CPU(우리가 사용하는..)
  2. OS : 32bit OS / 64bit OS 차이점 -> 32bit는 최대 사용 Memory 용량 : 4GB
  3. Application : 32bit App / 64bit App -> windows 에서는 큰차이없다.

  32bit -> x86, i586, i386
  64bit -> x64, AMD64



JAVA 8 = JRE(JVM)       JRE(Java Runtime Environment)




HTTP Request 구조
  ● Header (HTTP Request Header)
    - Request Line : 첫 번째 줄
                     ex) Paros에서 GET http://127.0.0.1/HTTP/1.1

                     [구조]

                     Method___URL____HTTP/버전   ex) GET http://127.0.0.1/HTTP/1.1
                     ------   ---    ----/----
                       1       2      3

                      1. Method
                      GET : 웹 페이지 요청 (내놔!)
                      POST : 서버로 데이터를 전송 (데이터를 보낼테니 처리해줘!)
                      HEAD
                      INFO
                       .
                       .
                       .

                      2. URL
                      ex) http://www.naver.com/

                      3. HTTP/버전 (두개의 버전이 있다)
                      http 1.0 버전
                      http 1.1 버전...대부분의 버전


    - Headers : 한줄 한줄이 Header

                [구조]

                1. 헤더명: 헤더내용          ex) Host 127.0.0.1, Hos www.naver.com
                   ex) Host 헤더 : 주소창에 입력한 URL주소에서
                                   '도메인 주소' 부분만 따로 적어놓는 곳
                                   -> 다중 웹 서버 구성


                2. User-Agent:엔진이름 : 브라우저 종류를 서버한테 알려준다
                                        ex) User-Agent: Mozilla/5.0(Windows NT 6.1;Win64;x64)...


                3. Accept 헤더 : 브라우저가 처리할 수 있는 데이터를 알려준다
                                 ex) Accet: text/html,application...*/*
                                 text/html : 텍스트로 되어있고 html 이다
                                 */* : 모든 종류를 다 지원한다 ---> MIME형식(이메일에서 데이터를 다루는 형식, 제일 먼저 이메일에서 사용되었다)


                4. Aceept-Language 헤더 : 처리 가능한 언어
                                          ex) Accept-Language: ko-KR,ko;q=0.8,en-US;q=0.6,en;q-04
                                          한국어가 제일 먼저 있기때문에 우선순위



  ● Body (HTTP Request Body)
    - POST Method 일 때 사용된다.
      형식이 너무 다양하다




HTTP Response 구조
  ● Header
    - Status Line :  첫 번째 줄
                     ex) HTTP/1.1 200 OK

                    [구조]

                    HTTP버전__상태코드__상태메시지           ex) HTTP/1.1 200 OK, HTTP/1.1 404 NOT FOUND

                    1. HTTP버전 : 사용되고 있는 HTTP버전을 알려준다
                                  ex) http 1.0
                                      http 1.1 (대부분 1.1 사용)


                    2. 상태코드 : 상태를 알려준다
                                 ex) 1xx, 2xx, 3xx, 4xx ....
                                 1xx ---> 단순 정보
                                 2xx ---> 정상처리
                                 3xx ---> Redirection (방향 재설정)
                                 4xx ---> 요청이 잘못됐다 (브라우저 잘못)
                                 5xx ---> 서버처리 오류 (서버 잘못)

                    3. 상태메시지 : 부연설명
                                   ex) OK, NOT FOUND


    - Headers : 한줄 한줄이 Header

                [구조] Content 가 의미하는것은 Body

                1. Content-Type 헤더 : Response Body에 들어있는 컨텐츠를 알려주는 내용
                                       ex) text/html, charset=UTF-8


                2. Content-Length 헤더 : Body에 들어있는 컨텐츠의 길이(Byte)



  ● Body (HTTP Response Body)




*-------------------------------------------------------*


회원가입 폼


# form 태그

- 기본 형식

<form method="메소드(GET/POST)" action="URL">             --- URL : 서버로 전송된 데이터를 처리할 대상을 정한다

<input type="종류" name="이름">
<input type="종류" name="이름">
<input type="종류" name="이름">
...

<input type="submit" value="버튼글씨">                    --- submit : 서버로 전송하라(버튼)
<input type="reset" value="버튼글씨">                     --- reset : 입력된 값 초기화

</form>




ex) 회원가입 페이지 (joinus.html)

<form method="POST" action="/Joinus.jsp">                --- joinus.jsp는 회원가입을 진행시킨다

ID<input type="text" name="ID">
Password<input type="password" name="PW">
Mobile<input type="text" name="Phone">


<input type="submit" value="가입">
<input type="reset" value="다시입력">

</form>


--------------------------------------------------------------------------------



JSP 역할 : 화면구성 (서버측 처리가 필요한 화면구성)
           JSP는 HTML 문서 내부에 사용

           ex") <h1> <%=id%> 님 환영 </h1>


Servlet(서블릿) : 확장자---> .java = .class


MVC(Model/View/Controller) : 유지보수를 위한...
                             1. Model : Data 처리
                                        Data베이스
                                Model 1 ---> JSP에서 모든 처리
                                Model 2 ---> NVC를 정확히 지킨다 (유지보수가 쉽기 때문, 대규모 사이트 사용)

                             2. View : User Interface (화면)
                                       대표적인 View 는 JSP

                             3. Controller : 전체적인 운영
                                             대표적인 Controller 는 Servlet



--------------------------------------------------------------------------------
11.8

MVC -> JavaWeb 개발 + Spring Framework (우리나라에서 대부분 사용함)

Javaweb : Java 기반의 Web            ex) JVM(JRE)
          Javaweb의 개발을 하기 위해선 JDK가 필요하다

JDK(Java Development Kit) : Java로 Application을 만드는데 필요한 도구모음

                            1. ★Template : 필수적으로 들어가는 내용을 자동으로 넣어주는 기능
                                            ex) <html>.....</html>

                            2. ★Library : 자주 사용하고 핵심적인 기능(function, method)을 모아놓은 곳

                            3. Example(Sample) : 참고사항


IDE : 통합 개발 환경
(Integrated Development Environment)

      기능

      1. 코드작성을 편리하게
      2. 라이브러리 활용 편리
      3. 샘플 참고 편리
      4. ....

      종류 (많이 사용하는..)

      1. MS Visual Studio (C언어, C++, C#, ...)

      2. Eclipse (Java, Python, Ruby, ...)


Java EE(Enterprise Edition)


WAS(Web Application Server) :


하나의 서버를 만들기 위해선 html, CSS, JS, image....가 필요하다 --- Web Server (View)
  대표적인 Web Server는 Apache HTTP Server


무언가를 처리하기 위해선 Servlet, dao, dto...가 필요하다 --- Web Application Server (Controller, Model)
  대표적인 WAS는 Tomcat




--------------------------------------------------------------------------------

설치

JDK                   ---> Java 환경변수 등록

                           1. java/jdk/bin(binary) 폴더에서 javac.exe의 경로를 환경변수에 등록
                           2. cmd에서 명령어 dir 검색
                              *명령프롬프트(cmd.exe) : 명령어나 실행파일을 실행시키고
                                                      결과를 확인 할 수 있다
                           3. cd(Change Directory) : 현재 디텍토리 변경하기
                              cd C:\Program Files\Java\jdk1.8.0_111\bin


                           아무데서나 javac.exe가 실행될 수 있도록 Path 환경변수 등록

                           1.  제어판 -> 시스템 -> 고급시스템설정 -> 고급
                               -> 환경변수 에서

                                변수 이름                    변수 값
                               사용자 변수에 JAVA_HOME = C:\Program Files\Java\jdk1.8.0_111
                               시스템 변수에 PATH = 원래 있던거;%JAVA_HOME%\bin


Eclipse (Java EE)     ---> 설치


Tomcat 7              ---> Eclipse에 등록

                           1. C드라이브에 'tomcat' 폴더 생성
                           2. 폴더에 apache-tomcat-7.0.72 넣기

                           3. Servers 메뉴에서 링크 클릭
                              Apache에서 tomcat7 선택
                              Browse에서 apache-tomcat-7.0.72 폴더 선택


--------------------------------------------------------------------------------

Windows Firewall : 네트워크 통신을 통제 (허용/차단)



HTTP(암호화 안되는..) ---> 80
HTTPS(암호화 되는...) ---> 443

--------------------------------------------------------------------------------

                              |
                              |
html -> CSS -> javascript -> JSP -> Servelet -> DB연동 -> DB(DBMS)
                              |
        FrontEnd              |              BackEnd
                              |

JSP
  - 확장자 : .jsp
  - 기본형식 : HTML 문서 내에 *포함*된다
                               ↓
                            지시자 <%@...%>
                            주석 <%--...%>
                            선언 <%!...%>
                            ★표현식 <%=...(변수)%> (Brower로 전송하고 싶은 내용이 있을 경우)
                            ★스크립틀릿 <%...%>

JSP 처리과정 (내부적 과정)
  JSP(.jsp) -> Java 파일로 변환(.java) -> Class(.class) -> html
                servelt으로 바꾼다                         응답(Brower로 전송)




Java 내장 객체
                                      내장 객체 : 누군가 만들어서 집어넣은 부품
  - requset 객체
  - response 객체


--------------------------------------------------------------------------------
11.9

Java Package : 배포단위
   (Class묶음)



패키지 이름정하기 (Package Naming)

  도메인 주소로 하기
  ex) www.khacademy.or.kr => kr.or.khacademy.www (거꾸로)
  이유는 중복되지 않기 때문이다




기본형식

  public static void main (String [] args){  }


자바 컴파일(명령줄)
  javac.exe 자바소스파일.java
              자바소스파일.java ---> 자바소스파일.class

자바 실행(명령줄)
  java.exe 자바소스파일      --- 확장자를 적으면 오류


클래스 소스 파일은 클래스의 이름과 동일하게 해줘야 한다




자바 컴파일 & 실행과정

  test.java : 자바 소스코드 파일
      |
      | (Compile) --- javac.exe test.java
      ↓
  test.class : 클래스 파일
  (ByteCode)
      |
      | (Compile) --- (java.exe로 실행)
      ↓
  기계어 코드 : Byte Code => Machine Code

--------------------------------------------------------------------------------

상수(Constant Value)

  System.out.println(1); ---> 1 출력 (숫자 상수)
  System.out.println('A'); ---> A 출력 (문자 상수)
  System.out.println("ABC"); ---> ABC 출력 (문자열 상수)


이스케이프(Escape) : 특수기호

  System.out.println(".......\"....\".......");
    \" : "
    \b : Backspace
    \t : TAB
     .
     .
     .


변수와 자료형

  Data Type                       --- 변수 공간의 크기, 변수 데이터의 형식

    1. byte : Byte             실제크기 1Byte
    2. short :                 실제크기 2Byte   범위 = -32768 ~ 32767
    3. ★int : Integer(정수)    실제크기 4Byte   범위 = -2147483648 ~ 2147483647
    4. long :                  실제크기 8Byte   범위 = ......
    5. ★char : Character(문자) 실제크기 2Byte   1글자(Unicode 기준)
    6. float : 실수             실제크기 4Byte       부동 소수점
    7. ★double : 실수          실제크기 8Byte        부동 소수점



Bit
  1 / 0 ---> True / False ---> Switch On / Off

  1bit -> 2가지 활용
  2bit -> 4가지
  4bit -> 16가지
  8bit -> 256가지
  16bit -> 65536가지


  음수 표현
  MSB(Most Significant Bit)
    가장 첫번째 비트(맨 왼쪽)이 '0'이면 양수, '1'이면 음수

    ex)
    -127 : 127 -> 01111111 -> 10000000 -> 10000001
    -1 : 1 -> 00000001 -> 11111110 -> 11111111

    Singed(부호가 있는..) / Unsigned(부호가 없는..)





1bit  = 2
2bit  = 4
4bit  = 16
8bit  = 256
10bit = 1024 --- 1,000
16bit = 65536 = 64K
20bit = 1048576 --- 1000,000
        1024 x 1024 = 1024K = 1M
32bit = 4294967296 --- 4G


ASCII Code(1Byte) : 영문 대문자, 소문자, 숫자, 특수기호만 사용
                    실제로는 7bit만 사용



Type Casting(형 변환) = Converting

  1. 자동 형변환 : 작은 자료형에서 큰 자료형으로 바꿀 수 있을 경우만
  2. 수동 형변환 : (바꿀 자료형)            ex) byte salary = (byte)2400000;
   (명시적 형변환)




문자 & 문자열

문자 -> 'a' 따옴표로 묶으면 문자로 취급
문자열 -> "a", "abc" 쌍따옴표로 묶으면 문자열로 취급

문자열이라고 하면 통상적으로 "NULL로 끝나는 문자열" 이라는 말을 사용



Literal

  int salary = 10 ;      ---> '10'이 리터럴이다 (변수에 집어 넣는 값)


--------------------------------------------------------------------------------
11.10

long name = .........L;                      '......' 은 리터럴

long 타입은 (java) --->




산술연산자

  + - * / %    --- % : 나머지

단항연산자

  + : 양수
  - : 음수
  ++ : 1증가
  -- : 1감소

연산자 우선순위

  10 * 2 - 3 --- 10 * 2 먼저 계산 후 - 3

  []
  ()
  .

비교 연산자

  == : equal
  != : not equal
  >
  <
  >=
  <=
  .equals : 문자열 비교 (자바에만 있다)

    ex) String Str1 = "Hello";
        String Str2 = "Hello";
		    System.out.println(Str1.equals(Str2));    --- Str1,2 이라는 class가 생성
                                                      그 안에 Str1,2 이라는 변수가 생긴다 (저장공간)
                                                      그리고 equals 라는 method

                                                      equals 라는 class 안에 있는 문자열과
                                                      Str2 인자와 비교

                                                      같다면 : True
                                                      다르면 : False 를 반환(return)

    result) true



java에서 문자열을 담는 변수

  char[] name = {'b', 'a', 'b', 'o'}

  String



문자열의 고통!!!!!!!!

  할 일이 많다 (길이, 비교, 키워드 찾기, 특정 문자/문자열 바꾸기)

  -String 객체 : 문자열을 처리하는데 필요한 변수공간, 메소드들을 모아놓은 객체(class)

  -String 클래스 메소드 :


정규화 표현식
  --- ex) 'A%', '%A%'


boolean(bool)
  --- 참/거짓 두 가지 값만 가지는 자료형


--------------------------------------------------------------------------------

비교문(if)

  if (조건) {
    참일때 실행
  }
    거짓일때 실행


    if (조건) {
      참일때 실행
    }
      else {
      거짓일때 실행
    }



비교문(switch case)

  switch (조건) {

    case 값1 :

    case 값2 :

    case 값3 :


  }



ex)
  int age = 3;
  switch (age) {

    case 1 :                              --- age == 1
      System.out.println("1살 입니다.");
    case 2 :
      System.out.println("2살 입니다.");
    case 3 :
      System.out.println("3살 입니다.");

  }


  int age=3;
  if (age==1){
    "1살 입니다.";
  } else if (age==2){
    "2살 입니다.";
  } else if (age==3){
    "3살 입니다.";
  }



반복문(while)

  while (조건) {


  }


반복문(do while) : 최소 1번은 실행해야 할

  do {


  } while (조건)




반복문(for)

  for (초기값; 조건; 증/감) {


  }




Java Application에서 입력값 받는 방법

  1. main Method의 Arguement 입력 받기

      ex) public class input1{
        public static void main (String []) args){

        }
      }



  2. Method 내부에서 입력받기

      ex)

      import(가져오기) : 외부 패키지에 있는 객체를 사용하고자 할때





debug(eclipse 에서)
  - break point : 프로그램이 멈추는 위치를 지정할 때 사용
  - step into : 한줄 씩 진행, 메소드 내부로 들어간다.
  - step over : 한줄 씩 진행, 메소드를 건너 뛴다.

--------------------------------------------------------------------------------
11.11

배열(Array)

  - 선언

    자료형[]배열명 = {값1,값2,값3,....};
    String[]name = {"babo", "hoho", "haha",...}; --- 문자열
    int[]num = {1, 2, 3, ...}; --- 숫자

  - 사용

    배열명[배열 안에서의 번호]

  - 활용1

    for each 문
    for (자료형 변수명 : 배열명){

    }

    for (String irum : name){
      System.out.println(irum);
    }

  - 활용2

    for (초기값;조건(배열의길이);증/감 값){

    }

    for (int i=0; i<name.length; i++){
      System.out.println(name[i]);
    }


2차원 배열

  -        [0]    [1]    [2]    [3]   [4] ...
    [0]  [0][0]  [0][1]  ...
    [1]  [1][0]  [1][1]  ...
    [2]   ...
    [3]
    [4]
                      --- 테이블에 넣을때 유용하다

  - 선언

    자료형[][]변수명 = {
                        {값1-1, 값1-2, 값1-3...}
                       ,{값2-1, 값2,2, 값2-3...}
                       ,{......}
                      };



    String[][]name = {
                        {"바보1", "바보2", "바보3"}
                       ,{"멍청이1", "멍청이2", "멍청이3"}
                       ,{"머저리1", "머저리2", "머저리3"}
                     };


   - 사용

    배열명[줄번호][칸번호]
    name[0][2]

   - 활용

    for(i=0; i<name.length; i++){
      System.out.println(name[0][i]);
    }



메소드(Method) 만들어 쓰기

  public static 반환형 메소드명(인자1, [인자2]....) {
                                     [인자2] --- []안에 넣으면 있든 없든 상관없다
    [return 반환값;]
  };

    반환형 = 반환값의 자료형
            (return)
    반환값이 없을 때 : void


호출하기

  메소드명(인자1, 인자2,...);


ex) 두개의 인자(숫자)를 입력하면 더해서 결과값을 반환

  public static int add(int num1, int num2){
    int sum;
    sum = num1 + num2;
    return sum;
  }


  public static void main (String[]args){
  int ret;
  ret = add(10,20);
  System.out.println("결과값은 = "+ret);
  }



리턴값이 여러개인 경우

  public static String[] nameOut(int cnt){
    String[]name = {"바보1", "바보2", "바보3"};
    String[]outname;

    for(int i=o; i<cnt; i++){
      outname[i] = name[i];
    }
    return outname;

  }


변수 Scope(적용범위)
  Method 안에서 선언한 변수는 Method 안에서만 겹치지 않으면 된다



sleep : 일정시간동안 진행을 멈춘다

  Thread.sleep(m초:1/1000초 ex) 3초 =3 000)

  Thread & Process


예외처리
  1. Try / Catch / Finally

    try {
          예외가 발생할 확률이 높은 코드
    } catch ( 예외종류 변수명 ) {
          예외가 발생했을 경우 실행 코드
    } finally {
          공통적으로 실행하는 코드
    }


  2. Throws

    ex) public static void testMethod()Throws 예외종류{

    }

--------------------------------------------------------------------------------
11.15

  접근제한자 [static] class 클래스명1 {

  접근제한자 [static] 자료형 변수명; --- 멤버변수(Member Variable)

    접근제한자 [static] 반환형 메소드명(인자1, 인자2...){

      자료형 변수명; --- 지역변수(Local Variable)

    }

  }

  ex)
  package com.silentpeople.ex1;

  public class testClass{ --- 클래스 선언, 클래스마다 별도의 .java파일이 만들어진다

    int age; --- 멤버변수
    int height; --- 멤버변수
    String name; --- 멤버변수

    public testClass(){ --- 메소드

      int age; --- 지역변수
      int height; --- 지역변수

    }
  }




생성자(Constructor) : 클래스의 객체로 만들 때 사용한다. 메소드와 비슷하지만 정확히 말하면
                     메소드는 아니다. 그냥 생성자라 부른다.



클래스(Class)? 객체(Object)? (생성자는 클래스와 이름이 동일하다. 반드시!)

  클래스 -> 설계도
  객체 -> 제품

  설계도(클래스)를 가지고 실제로 제품(객체)을 만드는 것을 객체를 생성한다
  ex) 붕어빵 장사를 하는데 붕어빵을 수제로 장인의 정신으로 만들면 망한다.
      붕어빵 틀을 미리 만들어주고 틀에 반죽을 넣고 덮고 돌려주면 완성


  Scanner scan; --- 객체는 생성이 됐지만..할게없다...

  클래스 객체

  scan = new Scanner(System.in); --- 인스턴스 생성

    new연산자 --- 생성자

    생성자 ex)
    package com.silentpeople.ex1;

    public class testClass{

      int age;
      String name;
      public void testClass(){ --- 생성자
      }
    }

--------------------------------------------------------------------------------

  package com.silentpeople.ex1;

  public class mainClass{

    public void main (Stringp[] args){

      testClass tclass1; --- 객체(Object) 생성
      tclass1 = new testClass(); --- 인스턴스(Instance) 생성
    }
  }



Java Application
  1. Java Application(DC, 서버) .jar
  2. Jva Applet => Web Browser에서 실행되는 Java Application
  3. Java Servlet

  Java Application은 package로 되어있다 ex) com.silentpeople.ex1


Java에서 Build라는 말은 Compile과 Link하라는 말이다.
Compile하면 ByteCode가 나온다.


초기화는 언제 필요한가?
  언제? --- 보통 인스턴스가 생성되었을 때,  메소드가 최초로 실행되었을 때...등등
  무엇을? --- 변수를 초기화한다, 주로 멤버변수를...
  어떻게? --- 인스턴스가 생성될 때 생성자에서 변수에 초기값을 넣어준다

  this : 자기가 속한 클래스를 의미한다


ex) 예제1

  자동차의 설계도를 만든다.(클래스)
    주요기능
      메인모듈
        시동값:악셀값:브레이크값 <--- 이런 형태로 입력값을 받는다.
          시동값은 StartEngine/StopEngine으로 전달한다.
          악셀값은 가속기능으로 전달.
      가속페달/브레이크
        가속기능 : Accelerator, 높은 숫자가 들어오면 분사량을 엔진으로 출력
          페달위치값(0~100)*3
        브레이크 : Brake, 높은 숫자가 들어오면 디스크의 힘을 높인다.
      시동걸기/시동끄기
        기동걸기 : 시동거는 값이 들어오면 엔진에 신호전달(1)
        기동끄기 : 시동끄는 값이 들어오면 엔진에 신호전달(0)
        시동여부 변수 : boolean engineOnOff
      엔진
        시동걸기로부터 입력값이 들어오면 시동을 건다, 시동 걸렸음을 출력(on)
        가속페달로부터 연료분사량값이 입력되면 회전수를 높인다.
          분사량*1000rpm
        시동끄기로부터 입력값이 들어오면 시동을 끈다, 시동 꺼짐을 출력(off)

        시동상태 변수명 : boolean engineStatus
        분사량 명수명 : int oilOut

--------------------------------------------------------------------------------
11.16

Instance ---> 객체가 사용할 메모리 공간 할당


Java의 RegEx(정규표현식) :



--------------------------------------------------------------------------------
git.com
github.com


1. cmd에서 git을 입력 후 실행
2. 원하는 프로젝트폴더 path에서 git init 입력 (파일 명령어 : cd)
3. git add . 입력
4. git commit -m "commit할때 이름"
5. git remote add origin (github URL)
6. git push -u origin master

--------------------------------------------------------------------------------
11.21

  기본자료형(Primitive Data Type)
    int, char, short, long, double, float

  참조자료형(Reference Data Type)
    Array Type : 배열타입
    Enumeration : 열거




Java Application의 메모리 구조 & 객체 생성 과정

  test.class

  public class test {
    int age;
    String name;

    public static test(){              --- 생성자

    }

    public void method1(){
      System.out.Println("test");
    }

  }





  start.class         --- 처음 실행되는 class

  public class start{
    public static void main(String[] args){
      tset t1;        --- 객체 생성
      t1 = new test();          ---


    }
  }

  객체가 생성되면 메모리에 만들어지는데 그것을 알려면 주소가 있어야한다.
  객체에 null을 넣어주면 주소를 잃어버린다. (garbage collection)
  ex) t1 = null;


  Multi Thread : 한 개의 Application에서 여러 개의 Thread를 작동

  Stack : Data 관리 방식
  stack(first in last out) <---> FIFO(first in first out)

  Heap :

--------------------------------------------------------------------------------

getter / setter

  getter : 인스턴스 변수의 값 얻어오기
  setter : 인스턴스 변수의 값 설정하기

  범위 : 객체 > 인스턴스




  public class test{

    int age;          --- 인스턴스 변수
    String name;          --- 인스턴스 변수
    static int salary;          --- 클래스 변수

    public void setAge(int age){          --- 메소드
      this.age = age;
    }

    public void setName(String name){          --- 메소드
      this.name = name;
    }

    System.out.println(t1.age);
    System.out.println(t1.getAge());
    System.out.println(t1.name);
    System.out.println(t1.getName());

  }





  test t1 = new test();
  t1.age = 2;
  t1.name = "haha";
  t1.setAge(2);
  t1.setName("haha");

--------------------------------------------------------------------------------

public / private
  접근제한자


  Class 변수 --- static 붙어있는 멤버변수
  Instance 변수 --- static 붙어있지 않은 멤버변수



  상속(Inheritance)
    상위클래스

    하위클래스


--------------------------------------------------------------------------------
11.22

프로젝트
  ER-Diagram
  Class-Diagram


Override : 상속이나 구현할 때 부모클래스나 인터페이스에서 정의된 메소드를 사용하거나
           내용을 수정하여 사용

Overroad : 메소드명이 같더라도 인자가 다르면 다른 메소드로 취급한다

--------------------------------------------------------------------------------
11.24

Collection

  List
    ArrayList --- 순서가 중요, 중복데이터 허용
    LinkedList
    Vector


  Set
    HashSet --- 순서는 중요X, 중복데이터 불허
    LinkedHashSet
    TreeSet

  Queue(큐, 대기열)



Map

  HashMap
    Key / value 로 이루어져있다



Multi Thread

  - Method를 Thread로 만든다






















.
