

--------------------------------------------------------------------------------

---- 변수

  할당 연산자(=) : 우측에 있는 데이터를 좌측으로 주입


● 기본 자료형과 객체 자료형

  기본 자료형(Primitive) : Java언어에 이미 존재하고 있는 데이터 타입.
                          주로 간단한 데이터들 이다. 소문자로 시작
                          ex) int, double, boolean, char...

   int i = 10;
   1. 'i' 라는 주머니를 만든다
   2. '10'을 주머니에 넣는다
   3. 'i' 내부에서는 int의 메모리만큼 공간을 만들고 그 안에 '10'을 넣는다




   객체 자료형(Object) : 여러가지 데이터들이 모여 있는 복잡한 데이터로 기본 자료형에 비해
                        크기가 크다. 대문자로 시작
                        ex) String, System, ArrayList...

   String s = "ABC";
   1. "ABC"라는 문자열을 주소값에 입력한 후
   2. 's' 내부에서는 String의 메모리만큼 공간을 만들고 그 안에 주소값을 넣는다



● 기본 자료형 종류와 크기

  논리형
    boolean : 1bit
  문자열
    char : 2byte
  정수형
    byte : 1byte
    short : 2byte
    int : 4byte
    long : 8byte
  실수형
    float : 4byte
    double : 8byte

● 형변환
  묵시적 형변환 : 작은 변수를 큰 변수로 옮기는 것
    ex) int i1 = 10;
        double d1 = i1; (O)

        double d2 = 10.0D;
        int i2 = d2;  (X)

   명시적 형변환 : 큰 변수를 작은 변수로 옮기는 것, 데이터 손실이 있을 수 있으며
                  코드에 명시해 주어야 한다
    ex) double d2 = 10.0D;
        int i2 = (int)d2;


--- 연산자

● 산술 연산자 : +, -, *, /, %

● 자동증갑 연산자 : ++, --

● 동등비교(==), 관계 연산자(<, >, <=, >=) : 동등한지 비교하여 true, false로 출력

● 논리 연산자 : &&(AND), ||(OR) : true, false로 출력

● 삼항 연산자
  ex) int h = 5;
      int result = h !=5 ? 1 : 2;
      h가 5가 아니라면 1을 출력 맞다면 2를 출력
      result : 2

● 할당 연산자 : =



--- 제어문과 루프

● 제어문 : 어떤 상황을 판단하여 결과를 true 또는 false를 반환함

    if문

    switch문

● 루프문 : 어떤 규칙에 의해 반복적인 연산을 한다

    for문

    while문



--- 배열(5강)

● 배열 : 하나의 데이터만 가지고 있던 변수와 달리 여러 개의 데이터를 가지고 있는 변수
         즉, 여러개의 변수를 모아놓은 또 하나의 변수라고 생각하면 쉽다.

         배열 안에는 배열을 구성하고 있는 데이터의 주소값이 들어있고 기초자료형 변수와
         달리 데이터가 들어 있지 않다.

    문법
      변수 선언과 거의 비슷하며, 여러 개의 데이터가 모여있어 '{}'를 이용 한다.
      배열의 크기는 최초에 한번 설정되면 변경이 불가능 하다.

    ex)
    변수 선언 : int i = 10;
    배열 선언 : int[] iArr = {10, 20, 30, 40, 50}; (배열의 크기 5)
    배열 선언 : int[] iArr = new int[5] (크기를 설정)
                  int[0] = 10;
                  int[1] = 20;
                  int[2] = 30;
                  int[3] = 40;
                  int[4] = 50;

    레퍼런스(Reference)
      배열은 배열을 구성하고 있는 데이터들의 주소값을 가지고 있는데
      이때 주소값을 '레퍼런스'라고 한다
      만약 동일한 주소값을 가지고 있다면 같은 데이터이다.


● 다차원 배열 : 배열의 데이터에 또 다른 배열이 들어 있는 구조

    ex)
    int[][] iArr = new int[3][];
    intp[0] = new int[2]; ---> int[0][0], int[0][1] 생성
    intp[1] = new int[3]; ---> int[1][0], int[1][1], int[1][2] 생성
    intp[2] = new int[2]; ---> int[2][0], int[2][1] 생성


    int[][] iArr = new int[3][2];
    iArr[0][0] = 10;
    iArr[0][1] = 20;
    iArr[1][0] = 100;
    iArr[1][1] = 200;
    ....


--- 객체지향(6강, 7강, 8강)

● 절차지향 : 위에서부터 내려오면서 실행

    단점
      기존의 코드를 변경하게 되면 동일한 작업이지만 다시 코드를 수정해야 한다
      유지 보수가 어렵다, 코드의 양이 많아진다

    그래서 등장한 방식이 함수 또는 메소드이다, 로직만 만들어 놓고 그때 그때 소스(데이터)를
    주면 메소드가 알아서 결과 값을 반환하는 방식


● 객체지향
    객체란 동일한 성질의 데이터와 메소드를 한곳에 모아두고 필요한 곳에서 언제든지 이용할
    수 있게 만들어 놓은 덩어리, 쉽게 생각해서 세상에 존재하는 모든 것을 객체라고 생각할 수
    있으며, 이러한 객체를 이용한 프로그래밍 방식이 객체지향 방식이다.


● 메소드의 이해
    ex)
    public int sum(int i, int j){         --- 반환하지 않는다면 void

      int r = 0;

      for (int h = i; h <= j; h++){
        r = r + h;
      }

      return r;
    }

● 객체의 개념
    객체는 같은 종류의 데이터와 로직이 함께 있는 구성체
    메소드와 비슷하지만 그 상위개념이라고 할 수 있고 완전한 독립체라고도 할 수 있다

    객체는 클래스로부터 생산(복사본)된다
    그리고 생성된 객체는 동일한 클래스에서 생성되었다 하더라도 완전한 독립체이다
    따라서 객체 안에 종속되어 있는 데이터는 완전히 별개의 데이터이다



                 _____ Object1
                |      (int i)
    Class1 -----|                 Object1 의 int i와 Object2 의 int i는 다르다
    (int i)     |_____ Object2
                       (int i)



● Study_makeClass.java 파일 참고


--- 클래스 실전(9강)

● 학사 관리 프로그램 만들기

    필요 클래스
      학사관리 시스템 클래스(main class)
      학생 정보 클래스(이름 나이 학번 전공 성별 --- 인스턴스 변수)
                     (업데이트 기능 --- 메소드)
      재적 학생 클래스(재적 당한 학생에 대해서 별도 관리)



--- 패키지 및 접근 제한(10강)

● 패키지
    JAVA에는 많은 .java 파일들이 존재하는데 이러한 많은 파일을 효율적으로 관리하기
    위해 JAVA에서는 '패키지'라는 구조를 사용한다

    패키지는 클래스를 모아 놓은 폴더

● 접근제한
    클래스의 데이터(인스턴스) 또는 메소드에 대해서 다른 클래스로부터의 접근을 제한하는 것
    즉 다른 클래스의 어떤 데이터가 접근을 제한하고 있다면, 그 데이터는 외부 다른 클래스에는
    사용을 할 수가 없다


    종류
      public : 접근 제한을 하지 않는다, 즉 다른 모든 클래스에서 사용 가능
      private : 자신의 클래스에서만 사용 가능, 외부에서는 사용할 수 없다
      protected : 해당 클래스와 동일한 패키지에 있거나 추후에 상속받은 클래스일 경우에만
                  사용 가능
      default : 해당 클래스와 동일한 패키지에서만 사용 가능

--- Static (11강)

● static(클래스 변수)
    static 키워드를 사용한 변수는 클래스 변수이고 객체는 클래스에서 생성(복사)되어 진다
    클래스 하나에서 무한대로 객체를 생성할 수 있고 그러한 객체는 모양이 동일할지 모르지만
    전혀 다른 객체이다
    하지만 static이 붙은 변수는 객체 변수가 아닌 클래스 변수로써 객체가 생성되기 전에
    이미 존재한다

    객체 생성을 하지 않고도 사용할 수 있다는 것은 장점이지만 관리 밖에 있기 때문에
    메모리에 상주해 있어서 오랜 시간 동안 돌아가게 되면 시스템 운영속도가 점차 느려진다

--- 상속 (12강)

● 상속
    어떤 객체가 다른 객체로부터 객체의 데이터(속성)와 메소드를 상속 받을 수 있다
    이럴 경우 상속받은 객체는 상속해준 객체의 데이터 및 메소드를 이용할 수 있고 또는
    변경 할 수도 있다

    상속의 이유
      1. 좋은 프로그램이 있다면 상속을 통해서 결과물을 빠르게 만들 수 있다
      2. 다양한 객체(타입)을 상속을 통해서 하나의 객체(타입)으로 묶을 수 있다




























.(12강까지 들었음)
