

--------------------------------------------------------------------------------

---- 변수

  할당 연산자(=) : 우측에 있는 데이터를 좌측으로 주입


● 기본 자료형과 객체 자료형

  기본 자료형(Primitive) : Java언어에 이미 존재하고 있는 데이터 타입.
                          주로 간단한 데이터들 이다. 소문자로 시작
                          ex) int, double, boolean, char...

   int i = 10;
   1. 'i' 라는 주머니를 만든다
   2. '10'을 주머니에 넣는다
   3. 'i' 내부에서는 int의 메모리만큼 공간을 만들고 그 안에 '10'을 넣는다




   객체 자료형(Object) : 여러가지 데이터들이 모여 있는 복잡한 데이터로 기본 자료형에 비해
                        크기가 크다. 대문자로 시작
                        ex) String, System, ArrayList...

   String s = "ABC";
   1. "ABC"라는 문자열을 주소값에 입력한 후
   2. 's' 내부에서는 String의 메모리만큼 공간을 만들고 그 안에 주소값을 넣는다



● 기본 자료형 종류와 크기

  논리형
    boolean : 1bit
  문자열
    char : 2byte
  정수형
    byte : 1byte
    short : 2byte
    int : 4byte
    long : 8byte
  실수형
    float : 4byte
    double : 8byte

● 형변환
  묵시적 형변환 : 작은 변수를 큰 변수로 옮기는 것
    ex) int i1 = 10;
        double d1 = i1; (O)

        double d2 = 10.0D;
        int i2 = d2;  (X)

   명시적 형변환 : 큰 변수를 작은 변수로 옮기는 것, 데이터 손실이 있을 수 있으며
                  코드에 명시해 주어야 한다
    ex) double d2 = 10.0D;
        int i2 = (int)d2;


--- 연산자

● 산술 연산자 : +, -, *, /, %

● 자동증갑 연산자 : ++, --

● 동등비교(==), 관계 연산자(<, >, <=, >=) : 동등한지 비교하여 true, false로 출력

● 논리 연산자 : &&(AND), ||(OR) : true, false로 출력

● 삼항 연산자
  ex) int h = 5;
      int result = h !=5 ? 1 : 2;
      h가 5가 아니라면 1을 출력 맞다면 2를 출력
      result : 2

● 할당 연산자 : =



--- 제어문과 루프

● 제어문 : 어떤 상황을 판단하여 결과를 true 또는 false를 반환함

    if문

    switch문

● 루프문 : 어떤 규칙에 의해 반복적인 연산을 한다

    for문

    while문



--- 배열(5강)

● 배열 : 하나의 데이터만 가지고 있던 변수와 달리 여러 개의 데이터를 가지고 있는 변수
         즉, 여러개의 변수를 모아놓은 또 하나의 변수라고 생각하면 쉽다.

         배열 안에는 배열을 구성하고 있는 데이터의 주소값이 들어있고 기초자료형 변수와
         달리 데이터가 들어 있지 않다.

    문법
      변수 선언과 거의 비슷하며, 여러 개의 데이터가 모여있어 '{}'를 이용 한다.
      배열의 크기는 최초에 한번 설정되면 변경이 불가능 하다.

    ex)
    변수 선언 : int i = 10;
    배열 선언 : int[] iArr = {10, 20, 30, 40, 50}; (배열의 크기 5)
    배열 선언 : int[] iArr = new int[5] (크기를 설정)
                  int[0] = 10;
                  int[1] = 20;
                  int[2] = 30;
                  int[3] = 40;
                  int[4] = 50;

    레퍼런스(Reference)
      배열은 배열을 구성하고 있는 데이터들의 주소값을 가지고 있는데
      이때 주소값을 '레퍼런스'라고 한다
      만약 동일한 주소값을 가지고 있다면 같은 데이터이다.


● 다차원 배열 : 배열의 데이터에 또 다른 배열이 들어 있는 구조

    ex)
    int[][] iArr = new int[3][];
    intp[0] = new int[2]; ---> int[0][0], int[0][1] 생성
    intp[1] = new int[3]; ---> int[1][0], int[1][1], int[1][2] 생성
    intp[2] = new int[2]; ---> int[2][0], int[2][1] 생성


    int[][] iArr = new int[3][2];
    iArr[0][0] = 10;
    iArr[0][1] = 20;
    iArr[1][0] = 100;
    iArr[1][1] = 200;
    ....


--- 객체지향(6강)

● 절차지향 : 위에서부터 내려오면서 실행

    단점
      기존의 코드를 변경하게 되면 동일한 작업이지만 다시 코드를 수정해야 한다
      유지 보수가 어렵다, 코드의 양이 많아진다

    그래서 등장한 방식이 함수 또는 메소드이다, 로직만 만들어 놓고 그때 그때 소스(데이터)를
    주면 메소드가 알아서 결과 값을 반환하는 방식


● 객체지향
    객체란 동일한 성질의 데이터와 메소드를 한곳에 모아두고 필요한 곳에서 언제든지 이용할
    수 있게 만들어 놓은 덩어리, 쉽게 생각해서 세상에 존재하는 모든 것을 객체라고 생각할 수
    있으며, 이러한 객체를 이용한 프로그래밍 방식이 객체지향 방식이다.


● 메소드의 이해
    ex)
    public int sum(int i, int j){         --- 반환하지 않는다면 void

      int r = 0;

      for (int h = i; h <= j; h++){
        r = r + h;
      }

      return r;
    }














.
